# This is the main configuration file for the application.
# ~~~~~
application.name=Personnel Attendance System

# Application mode
# ~~~~~
# Set to dev to enable instant reloading and other development help.
# Otherwise set to prod.
application.mode=dev
%prod.application.mode=prod

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions
# If you deploy your application to several instances be sure to use the same key !
application.secret=9BFoF22ydggvI8mVjbPteVzK6nHumoSksjCIBeTmYMM6H7kvK3oCLHaMUNpKartT

# i18n
# ~~~~~
# Define locales used by your application.
# You can then place localized messages in conf/messages.{locale} files
# application.langs=fr,en,ja
application.langs=it

# Date format
# ~~~~~
date.format=dd/MM/yyyy
#date.format=yyyy-mm-dd hh:mm:ss
# date.format.fr=dd/MM/yyyy

shib.login =false
shib.login.url =/Shibboleth.sso/Login
shib.login.return =/

# Enable logout for shibboleth (default false)

shib.logout.url =/Shibboleth.sso/Logout
shib.logout.return =/
shib.logout = true

shib.require =eppn
shib.attribute.eppn =eppn

%test.shib =mock

# Server configuration
# ~~~~~
# If you need to change the HTTP port, uncomment this (default is set to 9000)
# http.port=9001
#
# By default the server listen for HTTP on the wilcard address.
# You can restrict this.
# http.address=127.0.0.1
#
# Use this if you don't host your Play application at the root of the domain
# you're serving it from. This parameter has no effect when deployed as a
# war, because the path will be handled by the application server.
# http.path=/

# Session configuration
# ~~~~~~~~~~~~~~~~~~~~~~
# By default, session will be written to the transient PLAY_SESSION cookie.
# The cookies are not secured by default, only set it to true
# if you're serving your pages through https.
# application.session.cookie=PLAY
application.session.maxAge=4h
# application.session.secure=false

# Session/Cookie sharing between subdomain
# ~~~~~~~~~~~~~~~~~~~~~~
# By default a cookie is only valid for a specific domain. By setting
# application.defaultCookieDomain to '.example.com', the cookies
# will be valid for all domains ending with '.example.com', ie:
# foo.example.com and bar.example.com
# application.defaultCookieDomain=.example.com

# JVM configuration
# ~~~~~
# Define which port is used by JPDA when application is in debug mode (default is set to 8000)
# jpda.port=8000
#
java.source=1.8
%dev.jvm.memory= -javaagent:${project_loc:Personnel Attendance System}/lib/lombok-1.18.20.jar

# Log level
# ~~~~~
# Specify log level for your application.
# If you want a very customized log, create a log4j.properties file in the conf directory
#
# More logging configuration
# application.log.system.out=off

application.log.path=/log4j.dev.properties

%prod.application.log=INFO
%prod.application.log.path=/log4j.prod.properties
%prod.application.log.system.out=off

# Database configuration
# ~~~~~
# Enable a database engine if needed.
#
# To quickly set up a development database, use either:
#   - mem : for a transient in memory database (H2 in memory)
#   - fs  : for a simple file written database (H2 file stored)
# db=mem
#
# To connect to a local MySQL5 database, use:
# db=mysql://user:pwd@host/database
#
# To connect to a local PostgreSQL9 database, use:

db=postgres://epas:orario@localhost/epas-roma

# If you need a full JDBC configuration use the following :
# db.url=jdbc:postgresql:database_name
# db.driver=org.postgresql.Driver
# db.user=root
# db.pass=secret
#
# Connections pool configuration :
# db.pool.timeout=1000
# db.pool.maxSize=30
# db.pool.minSize=10
#
# If you want to reuse an existing Datasource from your application server, use:
# db=java:/comp/env/jdbc/myDatasource
#
# When using an existing Datasource, it's sometimes needed to destroy it when
# the application is stopped. Depending on the datasource, you can define a
# generic "destroy" method :
# db.destroyMethod=close

# JPA Configuration (Hibernate)
# ~~~~~
#
# Specify the custom JPA dialect to use here (default to guess):
jpa.dialect=org.hibernate.dialect.PostgreSQLDialect

#
# Specify the ddl generation pattern to use. Set to none to disable it
# (default to update in DEV mode, and none in PROD mode):

jpa.ddl=validate

#
# Debug SQL statements (logged using DEBUG level):

jpa.debugSQL=false

#
# You can even specify additional hibernate properties here:
# hibernate.use_sql_comments=true
# ...

# Store path for Blob content
attachments.path=data/attachments

# Memcached configuration
# ~~~~~
# Enable memcached if needed. Otherwise a local cache is used.
# memcached=enabled
#
# Specify memcached host (default to 127.0.0.1:11211)
# memcached.host=127.0.0.1:11211
#
# Or you can specify multiple host to build a distributed cache
# memcached.1.host=127.0.0.1:11211
# memcached.2.host=127.0.0.1:11212
#
# Use plain SASL to authenticate for memcached
# memcached.user=
# memcached.password=

# HTTP Response headers control for static files
# ~~~~~
# Set the default max-age, telling the user's browser how long it should cache the page.
# Default is 3600 (one hour). Set it to 0 to send no-cache.
# This is only read in prod mode, in dev mode the cache is disabled.
# http.cacheControl=3600

# If enabled, Play will generate entity tags automatically and send a 304 when needed.
# Default is true, set it to false to deactivate use of entity tags.
# http.useETag=true

# Custom mime types
# mimetype.xpi=application/x-xpinstall

# WS configuration
# ~~~~~
# Default engine is Async Http Client, uncomment to use
# the JDK's internal implementation
# webservice = urlfetch
# If you need to set proxy params for WS requests
# http.proxyHost = localhost
# http.proxyPort = 3128
# http.proxyUser = jojo
# http.proxyPassword = jojo

# Mail configuration
# ~~~~~
# Default is to use a mock Mailer
#mail.smtp=mock

# Or, specify mail host configuration
mail.smtp=mock

#Il default TLSv1.1 è deprecato
mail.smtp.ssl.protocols=TLSv1.2

%dev.mail.smtp=mock

# Url-resolving in Jobs
# ~~~~~~
# When rendering templates with reverse-url-resoling (@@{..}) in Jobs (which do not have an inbound Http.Request),
# ie if sending a HtmlMail, Play need to know which url your users use when accessing your app.
# %test.application.baseUrl=http://localhost:9000/
# %prod.application.baseUrl=http://www.yourdomain.com/
application.baseUrl=http://localhost:9000/

# Jobs executor
# ~~~~~~
# Size of the Jobs pool
# play.jobs.pool=10

# Execution pool
# ~~~~~
# Default to 1 thread in DEV mode or (nb processors + 1) threads in PROD mode.
# Try to keep a low as possible. 1 thread will serialize all requests (very useful for debugging purpose)
# play.pool=3

# Open file from errors pages
# ~~~~~
# If your text editor supports opening files by URL, Play! will
# dynamically link error pages to files
#
# Example, for textmate:
# play.editor=txmt://open?url=file://%s&line=%s

# Testing. Set up a custom configuration for test mode
# ~~~~~
#%test.module.cobertura=${play.path}/modules/cobertura

%test.application.mode=dev
%test.db=mem
%test.jpa.dialect=OurH2Dialect
%test.jpa.ddl=create-drop
%test.evolutions.enabled =false
%test.mail.smtp=mock
%test.http.port=3000

XForwardedSupport=all

# Perseo endpoint
anagrafica.base=               https://perseo.devel.iit.cnr.it
anagrafica.person=             /rest/people/getpersonbyperseoid?perseoId=
anagrafica.people=             /rest/people/allpeopleforepas
anagrafica.peopleinoffice=     /rest/people/alldepartmentpeopleforepas?perseoId=
anagrafica.offices=            /rest/departments/list
anagrafica.office=             /rest/departments/getdepartmentbyperseoid?perseoId=
anagrafica.institute=          /rest/departments/getinstitutebyperseoid?perseoId=
anagrafica.contracts=          /rest/contracts/allcontractsforepas
anagrafica.contractsinoffice=  /rest/contracts/allcontractsindepartmentforepas?perseoId=
anagrafica.contract=           /rest/contracts/getcontractbyperseoid?perseoId=
#Tutti i contratti di una persona
anagrafica.contractsByPersonId /rest/contracts/byPersonId?id=
anagrafica.roles=              /rest/roles/allrolesforepas

anagrafica.badgesinoffice=
anagrafica.badge=

anagrafica.sync.badges.enabled=false
anagrafica.sync.offices.enabled=false
anagrafica.sync.persons.enabled=false

# Attestati Api
attestati.base=http://as2dock.si.cnr.it
attestati.user=app.epas
attestati.pass=passworddacambiare

# Telework Api
telework.base=http://localhost:8080
telework.user=app.epas
telework.pass=passworddacambiare

# Parametri integrazione OIL

#Impostare a true per attivare l'invio delle segnalazioni ad OIL
oil.enabled=false

#Categorie utilizzate in OIL. La lista delle categorie è suddivisa da ",", il campo ":" è utilizzato invece
#come separatore tra l'id della categoria ed il nome visualizzato all'utente 
#oil.categories=4:epas,1:Registrazione Timbrature,2:Gestione Assenze,3:Gestione Competenze,5:Gestione Orario di lavoro,6:Altro

#L'id della categoria mostrata già selezionata (opzionale)
#oil.categories.selected=4

# Fine parametri OIL

#Questa è la lista dei CDS (separati da virgola) per cui non è attiva la possibilità di impostare
#la timbratura automatica per i dipendenti
permission.revoke.contract.stamp_profile.cds=000

## Configurazione LDAP
## ~~~~~~~~~~~~~
ldap.login =false

# URL server LDAP, per esempio ldap://ldap.cnr.it:389
#ldap.url =ldap://ldap.cnr.it:389

# Time in millisecondi della connessione LDAP
ldap.timeout =1000 

# DN base per la ricerca utenti
#ldap.dn.base =ou=People,dc=iit,dc=cnr,dc=it

# Se impostato dopo il login si viene re-indirizzati a questo URL
#ldap.login.return =/

# Nome dell'attributo LDAP da cui prelevare il campo con cui fare il match
# con il campo eppn presente in ePAS
ldap.eppn.attribute.name =eduPersonPrincipalName

## ~~~~~~~~~~~~~
# Fine configurazione LDAP


## Dati dell'ente/azienda che utilzza ePAS, default CNR ##
## ~~~~~~~~~~~~~

company.code =CNR
company.name =Consiglio Nazionale delle Ricerche
company.url =https://www.cnr.it

# Abilita il job di controllo green pass
greenpass.active=false

## ~~~~~~~~~~~~~~
## Fine dati dell'ente/azienda

## Configurazione JWT ed KeyCloak ##
## ~~~~~~~~~~~~~

oauth.login =false
#jwt.key =

keycloak.config.uri=file://${application.path}/conf/default-keycloak.json
keycloak.client_id =epas
#Parametro da impostare
keycloak.client_secret =tobeset!

#Campo del jwt utilizzato per cercare il campo con cui fare match con l'eppn in ePAS
#il default è email
#keycloack.jwt.field =email

# admin
#keycloak.admin.uri =
#keycloak.realm =

## ~~~~~~~~~~~~~~
## Fine configurazione JWT e Keycloak

# Le informazioni da impostare per lo sviluppo sulla propria workstation
# stanno nel file dev.conf
@include.dev=dev.conf

# Le informazioni da impostare in produzione stanno nel file prod.conf
@include.prod=prod.conf
